alias physicalSP S0;
alias syscallno S5;
alias currpid S2;
alias i S3;
alias currentPCB S1;
alias newPCB S4;
alias newphysicalSP S6;
alias j S7;
alias WaitingPID S8;
alias p S9;
p=1;

physicalSP= ([PTBR + 2*(SP/512)]*512)+(SP%512);

syscallno=[physicalSP-1];

if(syscallno==10)then            //syscall for exit


currpid=(PTBR-PAGE_TABLE)/8;            //find its pid
currentPCB=READY_LIST+32*currpid;

  i=0;
      while(i<32)do
        if([READY_LIST+32*i+1]==100+currpid)then
          [READY_LIST+32*i+1]=1;
        endif;
           i=i+1; 
      endwhile;


 i=0;
  while(i<32)do                           //search for a ready process in pcb
     if([READY_LIST+32*i+1]==1)then
       break;
     endif;
     i=i+1;
  endwhile;

  if(i>=32)then
   halt;
  endif;
    




j=15;
while(j<31)do                                  //remove all the per process open file table entries  and 
  if([currentPCB+j]!=-1)then                  // system wide open file table entries of current process      
    i=[currentPCB+j];
    [FILE_TABLE+2*i+1]=[FILE_TABLE+2*i+1]-1;
       if([FILE_TABLE+2*i+1]==0)then
         [FILE_TABLE+2*i]=-1;
       endif;
    [currentPCB+j]=-1;
    [currentPCB+j+1]=-1;
  endif;
 
j=j+2;
endwhile;

[currentPCB+1]=0;

i=0;
while(i<4)do                             //page table of current process  is invalidated
  if([PTBR+2*i+1]!="00")then             //memory free list is updated
     j=[PTBR+2*i];
     [MEM_LIST+j]=[MEM_LIST+j]-1;
     [PTBR+2*i]=-1;
     [PTBR+2*i+1]="00";
   else
     j=[PTBR+2*i];
     [PTBR+2*i]=-1;
     [PTBR+2*i+1]="00";
     if(j>=448) then
        [DISK_LIST+j]=[DISK_LIST+j]-1;
      endif;
  endif;
i=i+1;
endwhile;
store(6,20);

//print("IN int7");
//print(currentPCB);
inline "JMP 4742";

ireturn;
endif;




if(syscallno==13)then            //syscall for wait

 
  WaitingPID=[physicalSP-3];
  newPCB = READY_LIST+32*WaitingPID;
    if([newPCB+1]==2||[newPCB+1]==0)then
     [physicalSP-2]=-1;
     ireturn;
    endif;

  currpid=(PTBR-PAGE_TABLE)/8;
  currentPCB=READY_LIST+32*currpid;
  
  i=WaitingPID;

 while(1)do
     newPCB=READY_LIST+32*i;
     p=[newPCB+1];
      if(p>=100)then
          i=p-100;
         
          if(i==currpid)then
              [physicalSP-2]=-1;
              ireturn;
          else

              continue;
          endif;

         
      else
        break;
      endif;
      
endwhile;



  [currentPCB+1]=100+WaitingPID;
  [currentPCB+2]=BP;
  [currentPCB+3]=SP-1;
  [currentPCB+4]=[physicalSP];
  [currentPCB+5]=PTBR;
  [currentPCB+6]=PTLR;
  [currentPCB+7]=R0;
  [currentPCB+8]=R1;
  [currentPCB+9]=R2;
  [currentPCB+10]=R3;
  [currentPCB+11]=R4;
  [currentPCB+12]=R5;
  [currentPCB+13]=R6;
  [currentPCB+14]=R7;

  [physicalSP-2]=0;
  
  inline "JMP 4742";
  ireturn;
endif;



if(syscallno==14)then            //syscall for signal
   
   
  currpid=(PTBR-PAGE_TABLE)/8;
  
  currentPCB=READY_LIST+32*currpid; 

  i=0;
      while(i<32)do
        if([READY_LIST+32*i+1]==100+currpid)then
          [READY_LIST+32*i+1]=1;
        endif;
        i=i+1;
      endwhile;
       
   [physicalSP-2]=0;
     
   ireturn;

endif;





